from typing import List, Type, Union
from api import Plugin, Command, Cmdline, CommandReturnCode, CommandType, Session, logger
import argparse, re
from src.core.sessionadapter import SessionAdapter
from src.console.sessionmanager import ManagerSession
from src.core.connectionmanager import Connection, connection_manager
import src.config as config
import re

def get_plugin_class():
    return ExploitPlugin

class ExploitPlugin(Plugin, Command):
    name = 'exploit'
    description = 'Execute the webshell connection test, and create the session if successful'

    manager_session:ManagerSession # 存储管理者session

    def __init__(self):
        self.parse = argparse.ArgumentParser(prog=self.name, description=self.description)
        self.help_info = self.parse.format_help()

    def on_loading(self, session: Session) -> bool:
        if isinstance(session, ManagerSession): # 保存管理者session实例
            ExploitPlugin.manager_session = session
        else:
            return False
        return super().on_loading(session)

    def run(self, cmdline: Cmdline) -> CommandReturnCode:
        args = self.parse.parse_args(cmdline.options)
        return self.exploit()

    def exploit(self)->CommandReturnCode:
        """执行webshell连接测试

        Returns:
            CommandReturnCode: 命令返回码
        """
        if not self.manager_session.options.get_option('code_executor_id'):
            logger.error("No code executor selected (use the `set` command to select)")
            return CommandReturnCode.FAIL
        cc = Connection()
        cc.options = self.manager_session.options.copy()
        if not cc.options.get_option('command_executor_id'):
            cc.options.set_option('command_executor_id', 'core_plugins/exec')
        cc.session_type = self.manager_session.session_type
        session = SessionAdapter(cc)
        if session.init_session():
            self.manager_session.add_session(session)
            self.manager_session.set_current_session(session.session_id)
            self.manager_session.additional_data.prompt = self.manager_session.default_prompt
            self.manager_session.options.set_option('code_executor_id', '')
            logger.info(f"Switch to session `{session.session_id}`")
            return CommandReturnCode.SUCCESS
        if input("无法正确的连接到webshell，保存当前连接信息吗？(y/n) ").lower() == 'y':
            self.save_session(session) # 失败保存
        return CommandReturnCode.FAIL

    def save_session(self, session:Session)->CommandReturnCode:
        """保存指定的session

        Args:
            session (Session): session实例

        Returns:
            CommandReturnCode: 命令返回码
        """
        if connection_manager.add_or_update_connection(session.config):
            logger.info(f"Connection saved successfully", True)
            return CommandReturnCode.SUCCESS
        else:
            logger.error(f"Failed to save connection")

        return CommandReturnCode.FAIL

    @property
    def command_name(self) -> str:
        return self.name

    @property
    def command_type(self) -> CommandType:
        return CommandType.CORE_COMMAND